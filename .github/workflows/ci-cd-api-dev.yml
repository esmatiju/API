name: ci-cd-api-dev
run-name: Launch api from dev branch
on:
  push:
    branches:
      - dev
jobs:
  Check_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: install dependencies and setup
        run: |
          npm install next
          npm install
          npx prisma migrate dev -n migration
          node prisma/seed.js || true

      - name: lint project
        # Ã§a risque de ne pas marcher car quand on run la commande de base on nous demande une action de configuration...
        run: npm run lint

      # - name: reporting-code-coverage
      - name: run tests
        # unitaire
        run: npm test
        # integration
        # fonctionnel ?

  push_container_to_registry:
    name: Push Docker image to Docker Hub
    needs: Check_branch
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/arosaje_api_v2

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/arosaje_api_v2:dev

  Deploy_server:
    name: Deploy to EC2
    needs: push_container_to_registry
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: ssh connection and launch api
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
          USER_NAME: ${{secrets.USER_NAME}}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '

              # Now we have got the access of EC2 and we will start the deploy .
              sudo su
              docker run -it -p 6969:6969 -d --name api hamtiac/arosaje_api_v2:dev
              docker ps
              '
